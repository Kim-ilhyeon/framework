package com.kh.spring.aspect;

/*
 * 스프링 어플리케이션은 대부분 MVC 패턴에 따라
 * 
 * * Data Layer : 데이터 베이스 및 외부 서비스와의 연동
 * ---------------------------------------------
 * 
 * 	AOP (Aspect Oriented Ptogramming, 관점 지향 프로그래밍)
 * 	
 * 	AOP 를 통해서 위의 각 레이어에서 반복되는 공통 관심 사항들을 분리하여 
 * 	관리함으로써 코드의 재사용성을 높이고, 유지보수성을 강화할 수 있다.
 * 
 * 	ex) 로깅, 트랜잭션 처리(관리), 보안, ...
 * 
 * 	[장점]
 * 	- 특정 메소드만 선택적으로 로깅 가능
 * 	- 재사용성 높음
 * 
 * 	[단점]
 * - AOP 설정 작업 다소 복잡함
 * 
 * ------------------------
 * 
 * * 용어
 * 	- Aspect : Advice + PointCut. 여러 객체에 공총으로 적용되는 기능을 분리한 클래스.
 * 	- JoinPoint : 특정 작업이 시작되는 시점
 * 	- PointCut : 실제 Advice가 적용되는 부분
 * 	- Advice : 시점에 따라 삽입되어 동작될 코드 (공통되는 부분, 부가기능)
 * 	- Weaving : 해당 시점에 공통 부분(코드)를 끼워넣는 작업
 * 
 * * AOP 적용
 * 	- @Aspect : 해당 클래스가 Aspect 라는 것을 선언 (AOp를 적용할 클래스다.)
 * 	- @Pointcut : Advice를 적용할 JoinPoint 정읫 시 사용
 * 				  해당 AOP를 실행항 특정 메소드를 지정 (대상)
 * 	- 시점 (Advice 실행 시점)
 * 		+ @Before : 대상 메소드 실행 전 Advice(기능)이 실행
 * 		+ @After : 대상 메소드 실행 후 Advice 실행
 * 		+ @AfterReturning : 대상 메소드가 정상적으로 동작된 후 Advice실행
 * 		+ @AfterThrowing : 대상 메소드가 비정상적으로 동작된 후 (예외 반환) Advice 실행
 * 		+ @Around : 대상 메소드를 감싸서 호출 전/후로 Advice 실행
 */
public class LoggingAspect {

	
	
}
