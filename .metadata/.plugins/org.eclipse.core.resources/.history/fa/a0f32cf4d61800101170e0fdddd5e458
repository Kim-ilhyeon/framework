package com.kh.spring.board.controller;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.kh.spring.board.model.vo.Board;
import com.kh.spring.board.model.vo.Reply;
import com.kh.spring.board.service.BoardService;
import com.kh.spring.common.MyFileUtils;
import com.kh.spring.common.PageInfo;
import com.kh.spring.notice.model.dto.SearchDto;

import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/board")
public class BoardController {
	
	// BoardService 객체를 생성자 주입 방식(DI)으로 추가
	private final BoardService bService;
	
	@Autowired
	public BoardController (BoardService bService) {
		this.bService = bService;
	}
	// => lombok 을 사용할 경우 class위에 @RequiredArgsConstructor 추가
	
	/**
	 * 자유게시판 목록 페이지로 응답(요청 받는 주소 : /board/list)
	 */
	@GetMapping("/list")
	public ModelAndView boardListPage(/*String condition, String keyword*/SearchDto searchDto, @RequestParam(value="cpage", defaultValue="1")int currPage, ModelAndView mv) {
		
		// [1] 전체 게시글 수 조회
		int listCount = bService.selectBoardCount(searchDto);
		
		// [2] 현재 페이지 번호 --> 요청 시 전달되어야 하는 값
		
		// [3] 페이징 바 개수, 한 페이지 당 표시할 개수 --> 내가 지정
		int pageLimit = 5;
		int boardLimit = 5;
		
		PageInfo pi = new PageInfo(listCount, currPage, pageLimit, boardLimit);
		
		// 페이징 바 정보를 request 영역에 저장 --> 페이징 바 표시할 때 사용할 것임!
		mv.addObject("pi", pi);
		
		// 응답 전 DB에서 게시글 목록을 조회
		ArrayList<Board> list = bService.selectBoardList(searchDto, pi);
		System.out.println("boardController에서 list : " + list);
		
		// request 영역에 조회된 목록을 저장
		mv.addObject("list", list);
		mv.addObject("pi", pi);
		mv.addObject("condition", searchDto.getCondition());
		mv.addObject("keyword", searchDto.getKeyword());
		
		
		// 공지사항 목록 페이지 요청
		mv.setViewName("board/boardList");
		return mv;
		
	}
	
	/**
	 * 자유게시글 작성페이지 응답 (요청 받는 주소 : /board/enrollForm)
	 * 			"WEB-INF/views/board/boardEnrollForm.jsp"
	 */
	@GetMapping("/enrollForm")
	public String boardEnrollFormPage() {
		
		return "board/boardEnrollForm";
		
	}
	
	/**
	 * 자유 게시글 등록 (요청받는 주소 : /board/writer)
	 */
	@PostMapping("/writer")
	public String boardWriter(Board board, MultipartFile upfile, HttpSession session, Model model) {
		// * MultioartFile : springboot-start-web 패키지에 포함되어 있음
		// 서블릿에서는 => commons-io, commons-fileupload 라이브러리 사용
//		System.out.println("boardController에서의 board : " + board);
		/*
		System.out.println("boardController에서의 upfile : " + upfile);
		System.out.println("boardController에서의 upfile.isEmpty() : " + upfile.isEmpty() );
		*/
		// 첨부파일이 있는 경우 파일에 대한 처리
		if ( !upfile.isEmpty() ) {
			// 파일명을 변경 -> "spring_" + 현재날짜시간 + 랜덤값 + 확장자
			String changeName = MyFileUtils.saveFile(upfile,  session, "/resources/upfile/");
			
			// * Board 객체에 파일 관련된 필드 => originName, changeName
			board.setOriginName(upfile.getOriginalFilename());	// 파일 원본명
			board.setChangeName(changeName);
		}
		
		// * DB에 게시글 정보 저장 --> 첨부파일 유무 상관없이 처리해야 함!
		int result = bService.insertBoard(board);
		
		if (result > 0) {
			// 게시글 작성 성공
			session.setAttribute("alertMsg", "게시글 작성을 성공했습니다.");
			return "redirect:/board/list";
		} else  {
			// 게시글 작성 실패
			model.addAttribute("errorMsg", "게시글 작성에 실패했습니다.");
			return "/common/errorPage";
		}
		
	}
	
	@GetMapping("/detail")
	public String boardDetailPage(@RequestParam(value= "no", defaultValue="0") int boardNo, Model model) {
		System.out.println("boardController 요청은 들어옴@@@@@@@@@@@@@@@@@@@@@");
		// 해당 게시글의 조회수 증가
		int result = bService.increaseCount(boardNo);
		
		// 글 번호에 해당하는 게시글 정보 (글번호, 제목, 작성자, 작성일, 첨부파일, 내용)
		Board board = bService.selectBoardDetail(boardNo);
		
		
		// 해당 게시글의 댓글 리스트 정보 조회
		ArrayList<Reply> replyList = bService.selectReplyList(boardNo);
		
		
		// reqeust 영역에 board 저장 => Model 객체 사용
		model.addAttribute("board", board);
		// request 영역에 ReplyList 저장 => Model 객체 사용
		model.addAttribute("replyList", replyList);
		
		// 상세 페이지 응답
		return "board/boardDetail";
		
	}
	
	@GetMapping("/updatePage")
	public String boardUpdatePage(@RequestParam(value= "bno", defaultValue="0") int boardNo, Model model) {
		System.out.println("게시글 업데이트에서 전달받은 boardNo : " + boardNo);
		// 글 번호에 해당하는 게시글의 정보를 조회하여 반환
		Board board = bService.selectBoardDetail(boardNo);
		
		System.out.println("게시글 업데이트에서 반환받은 board : " + board);
		
		// request영역에 board저장 => model 객체 사용
		model.addAttribute("board", board);
		
		return "board/boardUpdate";
		
	}
	
	@PostMapping("/update")
	public String boardUpadate(Board board, MultipartFile upfile, HttpSession session, Model model) {
		System.out.println("보드 업데이트로 들어오긴함?!");
		System.out.println(board);
		
		// 새로 추가된 첨부파일이 있는 경우 Board객체에 첨부파일 정보를 저장. 서버에 해당 첨부파일 저장
		if ( !upfile.isEmpty() ) {
			// 파일명을 변경 -> "spring_" + 현재날짜시간 + 랜덤값 + 확장자
			String changeName = MyFileUtils.saveFile(upfile,  session, "/resources/upfile/");
			
			// * Board 객체에 파일 관련된 필드 => originName, changeName
			board.setOriginName(upfile.getOriginalFilename());	// 파일 원본명
			board.setChangeName(changeName);
		}
		String boardTitle = (String)model.getAttribute("boardTitle");
		String boardWriter = (String)model.getAttribute("boardWriter");
		String boardNo = (String)model.getAttribute("boardNo");
		
		// 글 번호에 해당하는 게시글의 정보를 전달받은 값들로 변경 (UPDATE)
		int result = bService.updateBoard(board);
		System.out.println("result : " + result);
		
		if (result > 0) {
			// 게시글 작성 성공
			session.setAttribute("alertMsg", "게시글 수정을 성공했습니다.");
			System.out.println("보드 업데이트 성공!!!!");
			return "redirect:/board/detail?no=" + board.getBoardNo() + "";
		} else  {
			// 게시글 작성 실패
			model.addAttribute("errorMsg", "게시글 수정에 실패했습니다.");
			System.out.println("보드 업데이트 실패 ㅠㅜㅜㅜㅜ");
			return "/common/errorPage";
		}
		


		
//		// 글 번호에 해당하는 게시글의 정보를 조회하여 반환
//		Board board = bService.selectBoardDetail(boardNo);
//		
		
	}
	
	@GetMapping("/delete")
	public String boardDelete(HttpSession session, @RequestParam(value= "bno", defaultValue="0") int boardNo, Model model) {
		
		int result = bService.deleteBoard(boardNo);
		System.out.println("result 의 값 : " + result);
		if (result > 0) {
			// 게시글 삭제 성공!!
			session.setAttribute("alertMsg", "게시글이 정상적으로 삭제되었습니다.!!");
			System.out.println("성공@@@@@@@@@");
			return "redirect:/board/list";
		} else {
			// 게시글 삭제 실패ㅠㅜ
			model.addAttribute("errorMsg", "게시글 삭제가 정상적으로 이루어지지 않았습니다.ㅠㅜ");
			System.out.println("실패ㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠ");
			return "/common/errorPage";
		}
		
	}
	
	
}
