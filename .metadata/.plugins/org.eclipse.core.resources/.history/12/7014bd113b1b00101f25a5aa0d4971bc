package com.kh.test.aspect;

import java.lang.reflect.Method;
import java.util.Arrays;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

// Aspect 선언

@Aspect		// Aspect 선언
@Component	// Bean 등록
public class LoggingAspect {

	// 롬복 없이 로그 객체 사용. Logger
	private final Logger log = LoggerFactory.getLogger(LoggingAspect.class);
	
	// * 기본 패키지 경로 내의 모든 메소드를 대상으로 
	@Pointcut("execution(* com.kh.test..controller.*.*(..))")
	private void controllerPointCut() {}
	
	// * 호출 전 메소드 명과, 파라미터 정보를 로그로 출력
	@Before("controllerPointCut()")
	public void beforeAdvice(JoinPoint joinPoint) {
		
		// * 실행되는 메소드 정보를 추출
		MethodSignature methodSignature = (MethodSignature)joinPoint.getSignature();
		Method method = methodSignature.getMethod();
		
		// * 파라미터 추출
		Object[] obj = joinPoint.getArgs();
		
		log.info("==================== Before Advice ====================");
		log.info("method info :: {}", methodSignature);
		log.info("method info :: {}", method);
		log.info("parameter :: {}", Arrays.toString(obj));
		
		
	}
	
}
